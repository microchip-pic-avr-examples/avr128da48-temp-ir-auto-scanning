pipeline {
    agent {
        kubernetes {
            label 'avr128da48-temp-ir-auto-scanning'
			defaultContainer 'xc8-mplabx'
            yamlFile 'cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'PICAVR_Examples_GateKeepers@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {		
		GITHUB_URL ='https://github.com/microchip-pic-avr-examples/avr128da48-temp-ir-auto-scanning.git'
		BITBUCKET_URL = 'https://bitbucket.microchip.com/scm/ebe/avr128da48-temp-ir-auto-scanning.git'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
		DEPLOY_SCRIPT_DIR = 'tool-github-deploy'
		DEPLOY_SCRIPT_FILE = 'deploy-source-as-is.sh'
		PROJECT_CONFIGURATION_OF_HEX_TO_DEPLOY = 'pro'
	}

    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
		stage('Pre-build') {
			steps {
				script {					
					MPLABX_PATH= sh (script: 'update-alternatives --list MPLABX_PATH',returnStdout: true).trim()
					COMPILER_PATH= sh (script: 'update-alternatives --list XC8_PATH',returnStdout: true).trim()										
					def pDir = "${MPLABX_PATH}/packs"					
					def ver = COMPILER_PATH.split('/')[4].substring(1)		
					
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-project-generator.git")					
					execute("cd tool-mplabx-c-project-generator && node configGenerator.js sp=../ v8=${ver} packs=${pDir}")	
				}
			}
		}

		stage('Build') {
            steps {
				script {
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-mplabx-c-build.git")						
					execute("cd tool-mplabx-c-build && node buildLauncher.js sp=../ rp=./output genMK=true")		 
				}
            }
        }	
		
        stage('Deploy') {
			when {
				not { 
					changeRequest() 
				}
				anyOf {
					tag ''
				}
            }
			steps {
				script {				
					def hexFiles = findFiles(glob: "**/${PROJECT_CONFIGURATION_OF_HEX_TO_DEPLOY}/**/*.hex")
					hexFiles = hexFiles.join(", ")		
					
					def githubObj = getGiHubInfo()
					
					execute("git clone ${env.DEPLOY_TOOL_URL}")		
					
					withCredentials([usernamePassword(credentialsId: '8bit-examples.github.com', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
						execute("cd ${env.DEPLOY_SCRIPT_DIR} && bash ${env.DEPLOY_SCRIPT_FILE} ${env.BITBUCKET_URL} ${env.GITHUB_URL} ${USER_NAME} ${USER_PASS} '--tag ${env.TAG_NAME}'")	
					}	

					withCredentials([usernamePassword(credentialsId: '8bit-examples.github.com', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {					
						execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -rlo=true -gpat=${USER_PASS}  -rpn=${githubObj.repoName} -rltv=${env.TAG_NAME} -rltt=${env.TAG_NAME} -rlua='${hexFiles}' -rle=true -dmfd=true")
					}
					
                    sendSuccessfulGithubDeploymentEmail()					
				}
			}
        }		
	}

    post {
        failure {			
            script {			
				sendPipelineFailureEmail()
            }
        }
        always {
            archiveArtifacts artifacts: "tool-mplabx-c-build/output/**", allowEmptyArchive: true, fingerprint: true
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}

def getGiHubInfo()
{
	def githubObj = [
		'ownerName':'',
		'repoName':''
		]
	String[] splitURLString = "${env.GITHUB_URL}".split("/")
	githubObj.repoName = splitURLString[splitURLString.size()-1]
	githubObj.repoName = githubObj.repoName.replace(".git","")
	githubObj.ownerName = splitURLString[splitURLString.size()-2]
	return githubObj
}

def sendPipelineFailureEmail () {
    if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
        mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    } else {			  
        mail to: "${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    }
}

def sendSuccessfulGithubDeploymentEmail () {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
    body: "The changes have been successfully deployed to GitHub. ${env.GITHUB_URL}"
}